// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RPC_KARMA_RPC_H_
#define FLATBUFFERS_GENERATED_RPC_KARMA_RPC_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace karma_rpc {

enum OperationCode : int16_t {
  OperationCode_UNKNOW = 0,
  OperationCode_PING = 1,
  OperationCode_HEARTBEAT = 2,
  OperationCode_MIN = OperationCode_UNKNOW,
  OperationCode_MAX = OperationCode_HEARTBEAT
};

inline const OperationCode (&EnumValuesOperationCode())[3] {
  static const OperationCode values[] = {
    OperationCode_UNKNOW,
    OperationCode_PING,
    OperationCode_HEARTBEAT
  };
  return values;
}

inline const char * const *EnumNamesOperationCode() {
  static const char * const names[4] = {
    "UNKNOW",
    "PING",
    "HEARTBEAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameOperationCode(OperationCode e) {
  if (::flatbuffers::IsOutRange(e, OperationCode_UNKNOW, OperationCode_HEARTBEAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOperationCode()[index];
}

}  // namespace karma_rpc

#endif  // FLATBUFFERS_GENERATED_RPC_KARMA_RPC_H_
